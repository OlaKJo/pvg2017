<project xmlns:jacoco="antlib:org.jacoco.ant" name="Enduro" default="rebuild">
<description>
Test Coverage for Enduro
</description>
<property name="doc.dir" location="./doc"/>
<property name="src.dir" location="./src/main/java"/>
<property name="test.dir" location="./src/test/java" />
<property name="result.dir" location="./build"/>
<property name="result.classes.dir" location="${result.dir}/classes"/>
<property name="result.test.classes" location="${result.dir}/test-classes" />
<property name="result.report.dir" location="${result.dir}/site/jacoco"/>
<property name="result.exec.file" location="${result.dir}/jacoco.exec"/>
<!--  Step 1: Import JaCoCo Ant tasks  -->
<path id="compile.classpath">
  <pathelement location="${src.dir}" />
  <pathelement location="${test.dir}" />
</path>

<path id="test.compile.classpath">
  <path refid="compile.classpath" />
  <pathelement location="lib/test/junit-4.12.jar" />
  <pathelement location="lib/test/hamcrest-core-1.3.jar" />
  <pathelement location="${result.classes.dir}" />
</path>

<path id="junit.classpath">
  <path refid="test.compile.classpath" />
  <pathelement location="${result.test.classes}" />
</path>

<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
<classpath path="lib/test/jacocoant.jar"/>
</taskdef>
<target name="clean">
<delete dir="${result.dir}"/>
</target>
<target name="compile">
<mkdir dir="${result.classes.dir}"/>
<javac srcdir="${src.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false">
  <classpath>
    <path refid="compile.classpath" />
  </classpath>
</javac>
</target>
<target name="test-compile" depends="compile">
  <mkdir dir="${result.test.classes}" />
  <javac srcdir="${test.dir}" destdir="${result.test.classes}" debug="true" includeantruntime="false">
    <classpath>
      <path refid="test.compile.classpath" />
    </classpath>
  </javac>
</target>
<target name="test" depends="test-compile">
<!--
 Step 2: Wrap test execution with the JaCoCo coverage task
-->
<jacoco:coverage destfile="${result.exec.file}">
  <junit printsummary="on" haltonfailure="yes" fork="true">
    <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma" />
    <jvmarg value="-Demma.coverage.out.merge=false" />
    <jvmarg value="-noverify" />
      <classpath>
        <pathelement location="${result.test.classes}"/>
        <path refid="junit.classpath"/>
      </classpath>
      <formatter type="brief" usefile="false" />
      <batchtest>
          <fileset dir="${result.test.classes}" includes="**/*Test*.class" />
      </batchtest>
  </junit>
</jacoco:coverage>
</target>
<target name="report" depends="test">
<!--  Step 3: Create coverage report  -->
<jacoco:report>
<!--
 This task needs the collected execution data and ...
-->
<executiondata>
<file file="${result.exec.file}"/>
</executiondata>
<!--  the class files and optional source files ...  -->
<structure name="Enduro Test Coverage">
<classfiles>
<fileset dir="${result.classes.dir}"/>
</classfiles>
<sourcefiles encoding="UTF-8">
<fileset dir="${src.dir}"/>
</sourcefiles>
</structure>
<!--  to produce reports in different formats.  -->
<html destdir="${result.report.dir}"/>
<csv destfile="${result.report.dir}/report.csv"/>
<xml destfile="${result.report.dir}/report.xml"/>
</jacoco:report>
</target>
<target name="doc" depends="report" description="generate documentation">
   <javadoc sourcepath="./src" destdir="${doc.dir}"/>
 </target>
<target name="rebuild" depends="clean,compile,test,report,doc"/>
</project>
